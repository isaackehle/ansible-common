---

#  environment:
#    NVM_DIR: /home/{{ansible_user}}/.nvm
#    PATH:    /{{NVM_DIR}}/versions/{{nvm.type}}/v{{nvm.ver}}/bin:{{ lookup('env', 'PATH') }}

- name: Set NVM_DIR
  set_fact:
    NVM_DIR: "/home/{{ansible_user}}/.nvm"
  no_log: true

- name: Get ID of local user
  shell: id -un
  connection: local
  register: username_result
  run_once: true
  no_log: true

- name: Create username and user keyfile path
  set_fact:
    username: "{{username_result.stdout}}"
    user_key_file: "{{username_result.stdout}}.pem"
  run_once: true
  no_log: true

- name: Set key_path for user and group permissions
  set_fact:
    key_path:
      user:  "{{ keys_base }}/{{ user_key_file }}"
      group: "{{ keys_base }}/{{ group_key_file }}"
  no_log: true

#- debug: var=key_path

- name: Test the user key_path
  stat:
    path: "{{ key_path.user }}"
  connection: local
  register: stat_user

- name: Test the group key_path
  stat:
    path: "{{ key_path.group }}"
  connection: local
  register: stat_group
  when: group_key_file != ""

- name: Get the status of both key_path values
  set_fact:
    exists:
      user: "{{stat_user is defined and stat_user.stat is defined and stat_user.stat.exists == true}}"
      group: "{{stat_group is defined and stat_group.stat is defined and stat_group.stat.exists == true}}"

#- debug: var=exists
#- debug: var=group_key_file
#- debug: var=stat_user
#- debug: var=stat_group
#- debug: var=use_user_key_file

- name: Select the user key
  set_fact:
    key_file_selection: "user"
  when: >
    ((use_user_key_file is defined and use_user_key_file|bool == true) or (exists.group != true)) and (exists.user == true)

- name: Select the group key
  set_fact:
    key_file_selection: "group"
  when: key_file_selection != "user" and exists.group == true

#- debug: var=key_file_selection

- name: Fail when the key was not selected
  fail: msg="Cannot choose a key file; group_key_file='{{ group_key_file }}'; exists={{exists}}"
  when: key_file_selection == ""

- name: Set the private key file for the session
  set_fact:
    ansible_ssh_private_key_file: "{{ key_path[key_file_selection] }}"

#- debug: var=ansible_ssh_private_key_file

- name: Fail on bad group key
  fail: msg="No private key file available; group_key_file='{{ group_key_file }}'"
  when: group_key_file != "" and not ansible_ssh_private_key_file is defined

- name: Gather Facts now that the server can be reached
  setup:
  when: ansible_host != 'localhost'

#
# hostnames
#

- name: Get the local hostname (short)
  shell: hostname -s
  connection: local
  register: host_short
  when: ansible_host == 'localhost'

- name: Get the local hostname (long)
  shell: hostname
  connection: local
  register: host_long
  when: ansible_host == 'localhost'

- name: Set basic facts, assuming MacOS
  set_fact:
    server_fqdn:            "{{host_long.stdout}}"
    hostname_short:         "{{host_short.stdout}}"
    inventory_hostname:     "{{host_short.stdout}}"
    ansible_distribution:   MacOS
    ansible_architecture:   x86_64
    gather_facts:           no
  when: ansible_host == 'localhost'
